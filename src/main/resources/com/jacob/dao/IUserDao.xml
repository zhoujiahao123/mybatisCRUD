<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jacob.dao.IUserDao">

    <resultMap id="userMap" type="com.jacob.domain.User">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="address" column="address"></result>
        <result property="sex" column="sex"></result>
        <result property="birthday" column="birthday"></result>
    </resultMap>
    <resultMap id="userAccountMap" type="user">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="address" column="address"></result>
        <result property="sex" column="sex"></result>
        <result property="birthday" column="birthday"></result>
        <!--配置user对象中的accounts集合的映射，oftype表示的是集合中的数据类型-->
        <collection property="accounts" ofType="account">
            <id column="aid" property="id"></id>
            <result column="uid" property="uid"></result>
            <result column="money" property="money"></result>
        </collection>
    </resultMap>
    <select id="findAll" resultMap="userAccountMap">
        <!--select id as userId,username as userName,address as userAddress,sex as userSex,birthday as userBirthday from user ;-->
        select * from user u left outer join account a on u.id = a.uid;
    </select>
    <insert id="saveUser" parameterType="com.jacob.domain.User">
        <!--配置插入操作后，获取插入数据的id-->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,address,sex,birthday) values(#{username},#{address},#{sex},#{birthday});
    </insert>
    <update id="updateUser" parameterType="com.jacob.domain.User">
        update user
        set
        username = #{username},
        address = #{address},
        sex = #{sex},
        birthday = #{birthday}
        where id = #{id};
    </update>
    <delete id="deleteUser" parameterType="integer">
        delete from user
        where id = #{id};
    </delete>
    <select id="findById" parameterType="integer" resultType="com.jacob.domain.User">
        select * from user
        where id = #{id};
    </select>
    <select id="findByName" parameterType="string" resultType="com.jacob.domain.User">
         select * from user where username like #{username};
        <!--select * from user where username like '%${value}%';-->
    </select>
    <select id="findTotal" resultType="integer">
        select count(id) from user ;
    </select>
    <select id="findByVo" parameterType="com.jacob.domain.QureyVo" resultType="com.jacob.domain.User">
        select * from user where username like #{user.username};
    </select>
    <select id="findUserInIds" parameterType="com.jacob.domain.QureyVo" resultMap="userMap" >
        select * from user
        <where>
            <if test="ids != null and ids.size()>0">
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>
</mapper>